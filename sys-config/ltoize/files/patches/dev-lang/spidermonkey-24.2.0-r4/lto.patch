--- ./js/src/builtin/Intl.cpp.orig      2017-06-25 11:04:52.150266554 +0200
+++ ./js/src/builtin/Intl.cpp   2017-06-25 11:36:01.103553866 +0200
@@ -998,7 +998,7 @@
     if (!chars2)
         return false;

-    UCollationResult uresult = ucol_strcoll(coll, chars1, length1, chars2, length2);
+    UCollationResult uresult = ucol_strcoll(coll, (const UChar*)chars1, length1, (const UChar*)chars2, length2);

     int32_t res;
     switch (uresult) {
@@ -1333,7 +1333,7 @@
         currency = value.toString();
         MOZ_ASSERT(currency->length() == 3, "IsWellFormedCurrencyCode permits only length-3 strings");
         // uCurrency remains owned by currency.
-        uCurrency = JS_GetStringCharsZ(cx, currency);
+        uCurrency = (const UChar*)JS_GetStringCharsZ(cx, currency);
         if (!uCurrency)
             return NULL;

@@ -1440,12 +1440,12 @@
     if (!chars.resize(INITIAL_STRING_BUFFER_SIZE))
         return false;
     UErrorCode status = U_ZERO_ERROR;
-    int size = unum_formatDouble(nf, x, chars.begin(), INITIAL_STRING_BUFFER_SIZE, NULL, &status);
+    int size = unum_formatDouble(nf, x, (UChar*)chars.begin(), INITIAL_STRING_BUFFER_SIZE, NULL, &status);
     if (status == U_BUFFER_OVERFLOW_ERROR) {
         if (!chars.resize(size))
             return false;
         status = U_ZERO_ERROR;
-        unum_formatDouble(nf, x, chars.begin(), size, NULL, &status);
+        unum_formatDouble(nf, x, (UChar*)chars.begin(), size, NULL, &status);
     }
     if (U_FAILURE(status)) {
         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_INTERNAL_INTL_ERROR);
@@ -1800,7 +1800,7 @@
     if (!skeleton)
         return false;
     SkipRoot skip(cx, &skeleton);
-    uint32_t skeletonLen = u_strlen(skeleton);
+    uint32_t skeletonLen = u_strlen((const UChar*)skeleton);

     UErrorCode status = U_ZERO_ERROR;
     UDateTimePatternGenerator *gen = udatpg_open(icuLocale(locale.ptr()), &status);
@@ -1810,7 +1810,7 @@
     }
     ScopedICUObject<UDateTimePatternGenerator> toClose(gen, udatpg_close);

-    int32_t size = udatpg_getBestPattern(gen, skeleton, skeletonLen, NULL, 0, &status);
+    int32_t size = udatpg_getBestPattern(gen, (const UChar*)skeleton, skeletonLen, NULL, 0, &status);
     if (U_FAILURE(status) && status != U_BUFFER_OVERFLOW_ERROR) {
         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_INTERNAL_INTL_ERROR);
         return false;
@@ -1820,13 +1820,13 @@
         return false;
     pattern[size] = '\0';
     status = U_ZERO_ERROR;
-    udatpg_getBestPattern(gen, skeleton, skeletonLen, pattern, size, &status);
+    udatpg_getBestPattern(gen, (const UChar*)skeleton, skeletonLen, pattern, size, &status);
     if (U_FAILURE(status)) {
         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_INTERNAL_INTL_ERROR);
         return false;
     }

-    RootedString str(cx, JS_NewUCStringCopyZ(cx, pattern));
+    RootedString str(cx, JS_NewUCStringCopyZ(cx, (const jschar *)((const UChar *)pattern)));
     if (!str)
         return false;
     args.rval().setString(str);
@@ -1874,7 +1874,7 @@
         if (!JSObject::getProperty(cx, internals, internals, cx->names().timeZone, &value))
             return NULL;
         if (!value.isUndefined()) {
-            uTimeZone = JS_GetStringCharsZ(cx, value.toString());
+            uTimeZone = (const UChar *)JS_GetStringCharsZ(cx, value.toString());
             if (!uTimeZone)
                 return NULL;
             uTimeZoneLength = u_strlen(uTimeZone);
@@ -1882,7 +1882,7 @@
     }
     if (!JSObject::getProperty(cx, internals, internals, cx->names().pattern, &value))
         return NULL;
-    uPattern = JS_GetStringCharsZ(cx, value.toString());
+    uPattern = (const UChar *)JS_GetStringCharsZ(cx, value.toString());
     if (!uPattern)
         return NULL;
     uPatternLength = u_strlen(uPattern);
@@ -1921,12 +1921,12 @@
     if (!chars.resize(INITIAL_STRING_BUFFER_SIZE))
         return false;
     UErrorCode status = U_ZERO_ERROR;
-    int size = udat_format(df, x, chars.begin(), INITIAL_STRING_BUFFER_SIZE, NULL, &status);
+    int size = udat_format(df, x, (UChar*)chars.begin(), INITIAL_STRING_BUFFER_SIZE, NULL, &status);
     if (status == U_BUFFER_OVERFLOW_ERROR) {
         if (!chars.resize(size))
             return false;
         status = U_ZERO_ERROR;
-        udat_format(df, x, chars.begin(), size, NULL, &status);
+        udat_format(df, x, (UChar*)chars.begin(), size, NULL, &status);
     }
     if (U_FAILURE(status)) {
         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_INTERNAL_INTL_ERROR);

